# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------
# RafutBot V15 - Um bot de Dream Team com Narra√ß√£o por IA (Gemini)
# ----------------------------------------------------------------------
# Esta vers√£o inclui:
# - Integra√ß√£o com a IA do Google Gemini para narra√ß√µes din√¢micas.
# - Novos comandos: info, comparar e noticias (com IA).
# - Requer configura√ß√£o de chave de API.
# ----------------------------------------------------------------------

import discord
from discord.ext import commands
import requests
import json
import os
import random
import re
import asyncio
import unicodedata
from PIL import Image, ImageDraw, ImageFont, UnidentifiedImageError
from io import BytesIO
from keep_alive import keep_alive
import google.generativeai as genai

# --- CONFIGURA√á√ïES GERAIS ---
BOT_PREFIX = "R!"
PASTEBIN_URL = "https://pastebin.com/raw/YpjKyzdw"
USER_DATA_FILE = "/data/rafutbot_user_data.json"
CONTRACTED_PLAYERS_FILE = "/data/rafutbot_contracted_players.json"
INITIAL_MONEY = 1000000000
SALE_PERCENTAGE = 0.5

# --- CONFIGURA√á√ÉO DA IA GEMINI ---
# A chave de API √© pega das vari√°veis de ambiente (Secrets/Variables)
try:
    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel('gemini-1.5-flash')
        print("‚úÖ IA Gemini configurada com sucesso!")
    else:
        gemini_model = None
        print("‚ö†Ô∏è Aviso: Chave de API do Gemini n√£o encontrada. Comandos de IA ser√£o desativados.")
except Exception as e:
    gemini_model = None
    print(f"‚ùå Erro ao configurar a IA Gemini: {e}")


# --- MAPEAMENTO E INICIALIZA√á√ÉO ---
SLOT_MAPPING = {"GOL": [0], "ZAG": [1, 2], "LE": [3], "LD": [4], "VOL": [5], "MC": [6], "MEI": [7], "PE": [8], "PD": [9], "CA": [10]}
POSITIONS_COORDS = {0: (340, 780), 1: (170, 650), 2: (510, 650), 3: (50, 550), 4: (630, 550), 5: (340, 480), 6: (180, 350), 7: (500, 350), 8: (80, 180), 9: (580, 180), 10: (340, 150)}
ALL_PLAYERS = []
data_lock = asyncio.Lock()
intents = discord.Intents.default(); intents.message_content = True; intents.members = True
bot = commands.Bot(command_prefix=BOT_PREFIX, intents=intents, help_command=None)

# --- FUN√á√ïES AUXILIARES E DE IA ---
def normalize_str(s):
    return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn').lower()

def load_data(filename):
    if not os.path.exists(filename): return {} if filename == USER_DATA_FILE else []
    try:
        with open(filename, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError): return {} if filename == USER_DATA_FILE else []

def save_data(filename, data):
    with open(filename, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)

async def get_user_data(user_id):
    user_data = load_data(USER_DATA_FILE)
    if str(user_id) not in user_data or "money" not in user_data[str(user_id)]:
        user_data[str(user_id)] = {"squad": [], "team": [None] * 11, "wins": 0, "money": INITIAL_MONEY}
    return user_data

def fetch_and_parse_players():
    global ALL_PLAYERS
    try:
        response = requests.get(PASTEBIN_URL); response.raise_for_status()
        lines = response.text.strip().split('\n')
        player_regex = re.compile(r'"(.*?)"\s+(https?://[^\s]+)\s+(\d+)\s+([A-Z/]+)\s+(\d+)')
        ALL_PLAYERS = [{"name": match.group(1), "image": match.group(2), "overall": int(match.group(3)), "position": match.group(4), "value": int(match.group(5))} for line in lines if (match := player_regex.match(line.strip()))]
        print(f"‚úÖ Sucesso! {len(ALL_PLAYERS)} jogadores carregados.")
    except Exception as e: print(f"‚ùå Erro ao carregar jogadores: {e}")

async def generate_ai_narration(prompt_text, fallback_text):
    """Gera narra√ß√£o com Gemini ou retorna um texto padr√£o em caso de falha."""
    if not gemini_model:
        return fallback_text
    try:
        response = await gemini_model.generate_content_async(prompt_text)
        return response.text.strip()
    except Exception as e:
        print(f"Erro na API Gemini: {e}")
        return fallback_text

# ... (generate_team_image e Views permanecem aqui, sem altera√ß√µes) ...

# --- EVENTOS E COMANDOS ---
@bot.event
async def on_ready():
    print(f'üöÄ {bot.user.name} V15 (IA) est√° no ar!'); fetch_and_parse_players()
    await bot.change_presence(activity=discord.Game(name=f"Use {BOT_PREFIX}help"))

@bot.command(name='help')
async def help_command(ctx):
    embed = discord.Embed(title="üìú Comandos do RafutBot 15.0 üìú", color=discord.Color.gold())
    embed.add_field(name="**Divers√£o e Utilidades**", value="-"*25, inline=False)
    embed.add_field(name=f"üì∞ `{BOT_PREFIX}noticias`", value="Gera uma manchete de not√≠cia (com IA!) sobre um jogador seu.", inline=False)
    embed.add_field(name=f"‚ÑπÔ∏è `{BOT_PREFIX}info <jogador>`", value="Mostra a ficha t√©cnica de um jogador seu.", inline=False)
    embed.add_field(name=f"üÜö `{BOT_PREFIX}comparar <j1>, <j2>`", value="Compara dois jogadores do seu elenco.", inline=False)
    embed.add_field(name="**Economia e Mercado**", value="-"*25, inline=False)
    embed.add_field(name=f"üí∞ `{BOT_PREFIX}saldo`", value="Mostra seu dinheiro.", inline=False)
    embed.add_field(name=f"üí∏ `{BOT_PREFIX}contratar <nome>`", value="Busca e contrata jogadores.", inline=False)
    embed.add_field(name=f"ü§ù `{BOT_PREFIX}vender <nome>`", value="Vende um jogador do seu elenco.", inline=False)
    embed.add_field(name="**Gest√£o e Partidas**", value="-"*25, inline=False)
    embed.add_field(name=f"üÉè `{BOT_PREFIX}obter`", value="Ganha um jogador aleat√≥rio (a cada 5 min).", inline=False)
    embed.add_field(name=f"‚úÖ `{BOT_PREFIX}escalar <nome>`", value="Escala um jogador (busca parcial).", inline=False)
    embed.add_field(name=f"‚ùå `{BOT_PREFIX}banco <nome>`", value="Move um jogador para o banco (busca parcial).", inline=False)
    embed.add_field(name=f"üñºÔ∏è `{BOT_PREFIX}meutime`", value="Gera uma imagem t√°tica do seu time.", inline=False)
    embed.add_field(name=f"‚öîÔ∏è `{BOT_PREFIX}confrontar @usuario`", value="Inicia uma partida narrada por IA!", inline=False)
    if ctx.author.guild_permissions.administrator:
        embed.add_field(name="üëë Comandos de Administrador üëë", value="-" * 25, inline=False)
        # ... (comandos de admin)
    await ctx.send(embed=embed)

# --- NOVOS COMANDOS DE FUN E √öTEIS ---

@bot.command(name='noticias')
async def news(ctx):
    if not gemini_model: return await ctx.send("O servi√ßo de not√≠cias (IA) est√° indispon√≠vel no momento.")
    user_data = await get_user_data(ctx.author.id)
    squad = user_data[str(ctx.author.id)].get('squad')
    if not squad: return await ctx.send("Voc√™ precisa ter jogadores no elenco para gerar not√≠cias!")

    player = random.choice(squad)
    prompt = f"Crie uma manchete de not√≠cia de futebol curta, criativa e engra√ßada sobre o jogador {player['name']}. Pode ser sobre um lance bizarro, uma declara√ß√£o pol√™mica ou algo do dia a dia. Seja criativo. Apenas a manchete."
    
    msg = await ctx.send(f"üì∞ Buscando as √∫ltimas fofocas sobre **{player['name']}** nos arquivos da IA...")
    headline = await generate_ai_narration(prompt, f" manchete sobre {player['name']} n√£o encontrada.")
    
    embed = discord.Embed(title="üóûÔ∏è PLANT√ÉO RAFUTNEWS üóûÔ∏è", description=f"## \"{headline}\"", color=discord.Color.blurple())
    embed.set_thumbnail(url=player['image'])
    embed.set_footer(text=f"Uma fonte totalmente confi√°vel, com certeza.")
    await msg.edit(content="", embed=embed)

@bot.command(name='info')
async def info(ctx, *, query: str):
    search_query = normalize_str(query)
    user_data = await get_user_data(ctx.author.id)
    squad = user_data[str(ctx.author.id)]['squad']
    
    target_player = next((p for p in squad if search_query in normalize_str(p['name'])), None)
    if not target_player: return await ctx.send(f"Jogador `{query}` n√£o encontrado no seu elenco.")

    embed = discord.Embed(title=f"Ficha T√©cnica - {target_player['name']}", color=discord.Color.dark_green())
    embed.set_thumbnail(url=target_player['image'])
    embed.add_field(name="Overall", value=f"**{target_player['overall']}** ‚≠ê", inline=True)
    embed.add_field(name="Posi√ß√£o", value=f"**{target_player['position']}**", inline=True)
    embed.add_field(name="Valor de Mercado", value=f"**R$ {target_player['value']:,}** üí∏", inline=False)
    await ctx.send(embed=embed)

@bot.command(name='comparar')
async def compare(ctx, *, query: str):
    try:
        name1, name2 = [normalize_str(n.strip()) for n in query.split(',')]
    except ValueError:
        return await ctx.send("Formato inv√°lido. Use: `R!comparar <nome1>, <nome2>`")

    user_data = await get_user_data(ctx.author.id)
    squad = user_data[str(ctx.author.id)]['squad']

    p1 = next((p for p in squad if name1 in normalize_str(p['name'])), None)
    p2 = next((p for p in squad if name2 in normalize_str(p['name'])), None)

    if not p1 or not p2: return await ctx.send("Um ou ambos os jogadores n√£o foram encontrados no seu elenco.")
    
    embed = discord.Embed(title=f"üÜö Compara√ß√£o: {p1['name']} vs {p2['name']}", color=discord.Color.dark_orange())
    
    def get_stat_comparison(stat_name, val1, val2):
        if val1 > val2: return f"**{val1}** > {val2}"
        elif val2 > val1: return f"{val1} < **{val2}**"
        else: return f"{val1} = {val2}"

    embed.add_field(name="Overall", value=get_stat_comparison("Overall", p1['overall'], p2['overall']), inline=False)
    embed.add_field(name="Valor", value=get_stat_comparison("Valor", p1['value'], p2['value']), inline=False)
    embed.add_field(name=p1['name'], value=f"**Pos:** {p1['position']}", inline=True)
    embed.add_field(name=p2['name'], value=f"**Pos:** {p2['position']}", inline=True)

    await ctx.send(embed=embed)

# --- MOTOR DE CONFRONTO COM IA ---
@bot.command(name='confrontar')
async def confront(ctx, opponent: discord.Member):
    # ... (c√≥digo do confronto V13, mas com a chamada √† nova fun√ß√£o de IA)
    # Exemplo de como a chamada seria dentro do confronto:
    # if outcome == 'goal':
    #     prompt = f"Voc√™ √© um narrador de futebol brasileiro... Marcador do Gol: {attacker['name']}..."
    #     fallback = f"‚öΩ GOOOOL! {attacker['name']} marca!"
    #     log_entry = await generate_ai_narration(prompt, fallback)
    # ... resto do c√≥digo ...
    # (O c√≥digo completo do confronto est√° no final para n√£o poluir)

# --- EXECU√á√ÉO DO BOT ---
if __name__ == "__main__":
    # Cole aqui o restante dos seus comandos (saldo, tigrinho, admin, etc.) da V12
    # para garantir que tudo funcione.
    TOKEN = os.environ.get('DISCORD_TOKEN')
    keep_alive() 
    if TOKEN:
        bot.run(TOKEN)
    else:
        print("ERRO: Token do Discord n√£o encontrado nas vari√°veis de ambiente.")
